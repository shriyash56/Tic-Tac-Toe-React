{"version":3,"sources":["Components/icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","count","setCount","changeItem","itemNumber","console","log","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4735e9b0.chunk.js","sourcesContent":["import React from 'react';\nimport { FaTimes,  FaRegCircle } from \"react-icons/fa\";\nimport { GiClick } from \"react-icons/gi\";\n\n\nconst Icon = ({name}) => {\n    switch (name) {\n        case 'circle':\n            return <FaRegCircle className = \"icon\" />\n        case 'cross':\n            return <FaTimes className = \"icon\" />\n        default:\n            return <GiClick className = \"icon\" />\n    }\n}\n\nexport default Icon;","import React, {useState} from 'react';\nimport Icon from './Components/icon'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody, Container, Button, Col, Row} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nconst itemArray = new Array(9).fill(\"empty\");\n\n const App = () => {\n  \n  const [isCross,setIsCross] = useState(false);\n  const [winMessage,setWinMessage] = useState(\"\");\n  const [count,setCount] = useState(1);\n\n\n  const reloadGame = () => {\n      setCount(1);\n      setIsCross(false);\n      setWinMessage(\"\");\n      itemArray.fill(\"empty\",0,9);\n  }\n\n  const checkIsWinner = () => {\n      if( itemArray[0] === itemArray[1] && itemArray[0] === itemArray[2] && itemArray[0] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[0]} wins`)\n      }\n      else if(itemArray[3] === itemArray[4] && itemArray[3] === itemArray[5] && itemArray[3] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[3]} wins`)\n      }\n      else if(itemArray[6] === itemArray[7] && itemArray[6] === itemArray[8] && itemArray[6] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[6]} wins`)\n      }\n      else if(itemArray[0] === itemArray[3] && itemArray[0] === itemArray[6] && itemArray[0] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[0]} wins`)\n      }\n      else if(itemArray[1] === itemArray[4] && itemArray[1] === itemArray[7] && itemArray[1] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[1]} wins`)\n      }\n      else if(itemArray[2] === itemArray[5] && itemArray[2] === itemArray[8] && itemArray[2] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[2]} wins`)\n      }\n      else if(itemArray[0] === itemArray[4] && itemArray[0] === itemArray[8] && itemArray[0] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[0]} wins`)\n      }\n      else if(itemArray[2] === itemArray[4] && itemArray[2] === itemArray[6] && itemArray[2] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[2]} wins`)\n      }\n  \n  }\n\n  const changeItem = itemNumber => {\n      setCount(count + 1)\n      console.log(count)\n      if(count === 9 )\n      {\n        setWinMessage(\"Draw\")\n        return toast(\"No one win\",{type:\"info\"})\n      }\n      if(winMessage)\n      {\n        return toast(winMessage,{type:\"success\"});\n      }\n      if(itemArray[itemNumber] === \"empty\")\n      {\n        itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n        setIsCross(!isCross);\n      }\n      else{\n        return toast(\"Already filled\",{type:\"error\"});\n      }\n\n      checkIsWinner();\n  }\n\n  return (\n      <Container className=\"p-5\">\n        <div className=\"heading\">\n          <h1>Tic-Tac-Toe</h1>\n        </div>\n         <ToastContainer position=\"bottom-center\" />\n            <Row>\n              <Col md={6} className=\"offset-md-3\">\n                {winMessage ? (\n                  <div className = \"md-2 mt-2\">\n                    <h1 className=\"text-success text-uppercase text-center\">\n                      {winMessage}\n                    </h1>\n                    <Button color=\"success\" block onClick={reloadGame}>\n                      Reload The Game\n                    </Button>\n                    <br></br>\n                  </div>\n                ) : (\n                  <h1 className=\"text-center text-warning\">\n                     {isCross ? \"Cross\" : \"Circle\" } turns\n                  </h1>\n                )}\n                <div className=\"grid\">\n                  {itemArray.map((item,index) => (\n                    <Card onClick = {() => changeItem(index)} >\n                      <CardBody className=\"box\">\n                        <Icon name={item} />\n                      </CardBody>\n                    </Card>\n                  ))}\n                </div>\n              </Col>\n            </Row>\n      </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}